def is_safe(board, row, col, n):
    # Check if a queen can be placed at board[row][col]
    
    # Check the left side of the row
    for i in range(col):
        if board[row][i] == 1:
            return False

    # Check the upper left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check the lower left diagonal
    for i, j in zip(range(row, n, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    return True

def solve_n_queens_util(board, col, n, solutions):
    if col >= n:
        # All queens are placed successfully, add the solution
        solutions.append(["".join(["Q" if c == 1 else "." for c in row]) for row in board])
        return

    for i in range(n):
        if is_safe(board, i, col, n):
            board[i][col] = 1
            solve_n_queens_util(board, col + 1, n, solutions)
            board[i][col] = 0  # Backtrack

def solve_n_queens(n):
    board = [[0] * n for _ in range(n)]
    solutions = []

    solve_n_queens_util(board, 0, n, solutions)
    
    return solutions

def print_solutions(solutions):
    for i, solution in enumerate(solutions):
        print(f"Solution {i + 1}:")
        for row in solution:
            print(row)
        print()

if __name__ == "__main__":
    n = 8  # Change this to the desired board size
    solutions = solve_n_queens(n)
    if solutions:
        print(f"Found {len(solutions)} solutions for {n}-Queens problem:")
        print_solutions(solutions)
    else:
        print(f"No solutions found for {n}-Queens problem.")
